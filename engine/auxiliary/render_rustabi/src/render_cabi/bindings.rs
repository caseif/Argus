/* automatically generated by rust-bindgen 0.69.4 */

use super::*;

pub const RESOURCE_TYPE_TEXTURE_PNG: &[u8; 10] = b"image/png\0";
pub const RESOURCE_TYPE_MATERIAL: &[u8; 34] = b"application/x-argus-material+json\0";
pub const RESOURCE_TYPE_SHADER_GLSL_VERT: &[u8; 19] = b"text/x-glsl-vertex\0";
pub const RESOURCE_TYPE_SHADER_GLSL_FRAG: &[u8; 21] = b"text/x-glsl-fragment\0";
pub const LIGHTS_MAX: u32 = 32;
pub const SHADER_TYPE_GLSL: &[u8; 5] = b"glsl\0";
pub const SHADER_TYPE_SPIR_V: &[u8; 6] = b"spirv\0";
pub const SHADER_STRUCT_LIGHT2D_LEN: u32 = 64;
pub const SHADER_STRUCT_LIGHT2D_COLOR_OFF: u32 = 0;
pub const SHADER_STRUCT_LIGHT2D_POSITION_OFF: u32 = 16;
pub const SHADER_STRUCT_LIGHT2D_INTENSITY_OFF: u32 = 32;
pub const SHADER_STRUCT_LIGHT2D_FALLOFF_GRAD_OFF: u32 = 36;
pub const SHADER_STRUCT_LIGHT2D_FALLOFF_DIST_OFF: u32 = 40;
pub const SHADER_STRUCT_LIGHT2D_FALLOFF_BUFFER_OFF: u32 = 44;
pub const SHADER_STRUCT_LIGHT2D_SHADOW_FALLOFF_GRAD_OFF: u32 = 48;
pub const SHADER_STRUCT_LIGHT2D_SHADOW_FALLOFF_DIST_OFF: u32 = 52;
pub const SHADER_STRUCT_LIGHT2D_TYPE_OFF: u32 = 56;
pub const SHADER_STRUCT_LIGHT2D_IS_OCCLUDABLE_OFF: u32 = 60;
pub const SHADER_ATTRIB_POSITION: &[u8; 12] = b"in_Position\0";
pub const SHADER_ATTRIB_NORMAL: &[u8; 10] = b"in_Normal\0";
pub const SHADER_ATTRIB_COLOR: &[u8; 9] = b"in_Color\0";
pub const SHADER_ATTRIB_TEXCOORD: &[u8; 12] = b"in_TexCoord\0";
pub const SHADER_ATTRIB_ANIM_FRAME: &[u8; 13] = b"in_AnimFrame\0";
pub const SHADER_OUT_COLOR: &[u8; 10] = b"out_Color\0";
pub const SHADER_OUT_LIGHT_OPACITY: &[u8; 17] = b"out_LightOpacity\0";
pub const SHADER_UBO_GLOBAL: &[u8; 7] = b"Global\0";
pub const SHADER_UBO_GLOBAL_LEN: u32 = 16;
pub const SHADER_UNIFORM_GLOBAL_TIME: &[u8; 5] = b"Time\0";
pub const SHADER_UNIFORM_GLOBAL_TIME_OFF: u32 = 0;
pub const SHADER_UBO_SCENE: &[u8; 6] = b"Scene\0";
pub const SHADER_UBO_SCENE_LEN: u32 = 2096;
pub const SHADER_UNIFORM_SCENE_AL_COLOR: &[u8; 18] = b"AmbientLightColor\0";
pub const SHADER_UNIFORM_SCENE_AL_COLOR_OFF: u32 = 0;
pub const SHADER_UNIFORM_SCENE_AL_LEVEL: &[u8; 18] = b"AmbientLightLevel\0";
pub const SHADER_UNIFORM_SCENE_AL_LEVEL_OFF: u32 = 16;
pub const SHADER_UNIFORM_SCENE_LIGHT_COUNT: &[u8; 11] = b"LightCount\0";
pub const SHADER_UNIFORM_SCENE_LIGHT_COUNT_OFF: u32 = 20;
pub const SHADER_UNIFORM_SCENE_LIGHTS: &[u8; 7] = b"Lights\0";
pub const SHADER_UNIFORM_SCENE_LIGHTS_OFF: u32 = 32;
pub const SHADER_UBO_VIEWPORT: &[u8; 9] = b"Viewport\0";
pub const SHADER_UBO_VIEWPORT_LEN: u32 = 64;
pub const SHADER_UNIFORM_VIEWPORT_VM: &[u8; 11] = b"ViewMatrix\0";
pub const SHADER_UNIFORM_VIEWPORT_VM_OFF: u32 = 0;
pub const SHADER_UBO_OBJ: &[u8; 7] = b"Object\0";
pub const SHADER_UBO_OBJ_LEN: u32 = 16;
pub const SHADER_UNIFORM_OBJ_UV_STRIDE: &[u8; 9] = b"UvStride\0";
pub const SHADER_UNIFORM_OBJ_UV_STRIDE_OFF: u32 = 0;
pub const SHADER_UNIFORM_OBJ_LIGHT_OPACITY: &[u8; 13] = b"LightOpacity\0";
pub const SHADER_UNIFORM_OBJ_LIGHT_OPACITY_OFF: u32 = 8;
pub const SHADER_STD_VERT: &[u8; 29] = b"argus:render/shader/std_vert\0";
pub const SHADER_STD_FRAG: &[u8; 29] = b"argus:render/shader/std_frag\0";
pub const SHADER_SHADOWMAP_VERT: &[u8; 35] = b"argus:render/shader/shadowmap_vert\0";
pub const SHADER_SHADOWMAP_FRAG: &[u8; 35] = b"argus:render/shader/shadowmap_frag\0";
pub const SHADER_LIGHTING_VERT: &[u8; 34] = b"argus:render/shader/lighting_vert\0";
pub const SHADER_LIGHTING_FRAG: &[u8; 34] = b"argus:render/shader/lighting_frag\0";
pub const SHADER_LIGHTMAP_COMPOSITE_VERT: &[u8; 44] =
    b"argus:render/shader/lightmap_composite_vert\0";
pub const SHADER_LIGHTMAP_COMPOSITE_FRAG: &[u8; 44] =
    b"argus:render/shader/lightmap_composite_frag\0";
pub type argus_scene_t = *mut ::std::os::raw::c_void;
pub type argus_scene_const_t = *const ::std::os::raw::c_void;
pub const ARGUS_SCENE_TYPE_TWO_D: ArgusSceneType = 0;
pub const ARGUS_SCENE_TYPE_THREE_D: ArgusSceneType = 1;
pub type ArgusSceneType = ::std::os::raw::c_uint;
pub const ARGUS_VCSM_INDIVIDUAL: ArgusViewportCoordinateSpaceMode = 0;
pub const ARGUS_VCSM_MIN_AXIS: ArgusViewportCoordinateSpaceMode = 1;
pub const ARGUS_VCSM_MAX_AXIS: ArgusViewportCoordinateSpaceMode = 2;
pub const ARGUS_VCSM_HORIZONTAL_AXIS: ArgusViewportCoordinateSpaceMode = 3;
pub const ARGUS_VCSM_VERTICAL_AXIS: ArgusViewportCoordinateSpaceMode = 4;
pub type ArgusViewportCoordinateSpaceMode = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ArgusViewport {
    pub top: f32,
    pub bottom: f32,
    pub left: f32,
    pub right: f32,
    pub scaling: argus_vector_2f_t,
    pub mode: ArgusViewportCoordinateSpaceMode,
}
pub type argus_attached_viewport_t = *mut ::std::os::raw::c_void;
pub type argus_attached_viewport_const_t = *const ::std::os::raw::c_void;
pub type ArgusActivateRenderBackendFn = ::std::option::Option<unsafe extern "C" fn() -> bool>;
#[repr(C)]
pub struct ArgusTransform2d {
    pub translation: argus_vector_2f_t,
    pub scale: argus_vector_2f_t,
    pub rotation: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argus_matrix_4x4_t {
    pub cells: [f32; 16usize],
}
pub type argus_camera_2d_t = *mut ::std::os::raw::c_void;
pub type argus_camera_2d_const_t = *const ::std::os::raw::c_void;
pub type argus_scene_2d_t = *mut ::std::os::raw::c_void;
pub type argus_scene_2d_const_t = *const ::std::os::raw::c_void;
pub type argus_attached_viewport_2d_t = *mut ::std::os::raw::c_void;
pub type argus_attached_viewport_2d_const_t = *const ::std::os::raw::c_void;
pub type argus_material_t = *const ::std::os::raw::c_void;
pub const k_shader_type_glsl: &[u8; 5] = b"glsl\0";
pub const k_shader_type_spirv: &[u8; 6] = b"spirv\0";
pub type argus_shader_t = *mut ::std::os::raw::c_void;
pub type argus_shader_const_t = *const ::std::os::raw::c_void;
pub type argus_shader_refl_info_t = *mut ::std::os::raw::c_void;
pub type argus_shader_refl_info_const_t = *const ::std::os::raw::c_void;
pub const ARGUS_SHADER_STAGE_VERTEX: ArgusShaderStage = 1;
pub const ARGUS_SHADER_STAGE_FRAGMENT: ArgusShaderStage = 2;
pub type ArgusShaderStage = ::std::os::raw::c_uint;
pub const GLSLANG_STAGE_VERTEX: glslang_stage_t = 0;
pub const GLSLANG_STAGE_TESSCONTROL: glslang_stage_t = 1;
pub const GLSLANG_STAGE_TESSEVALUATION: glslang_stage_t = 2;
pub const GLSLANG_STAGE_GEOMETRY: glslang_stage_t = 3;
pub const GLSLANG_STAGE_FRAGMENT: glslang_stage_t = 4;
pub const GLSLANG_STAGE_COMPUTE: glslang_stage_t = 5;
pub const GLSLANG_STAGE_RAYGEN: glslang_stage_t = 6;
pub const GLSLANG_STAGE_RAYGEN_NV: glslang_stage_t = 6;
pub const GLSLANG_STAGE_INTERSECT: glslang_stage_t = 7;
pub const GLSLANG_STAGE_INTERSECT_NV: glslang_stage_t = 7;
pub const GLSLANG_STAGE_ANYHIT: glslang_stage_t = 8;
pub const GLSLANG_STAGE_ANYHIT_NV: glslang_stage_t = 8;
pub const GLSLANG_STAGE_CLOSESTHIT: glslang_stage_t = 9;
pub const GLSLANG_STAGE_CLOSESTHIT_NV: glslang_stage_t = 9;
pub const GLSLANG_STAGE_MISS: glslang_stage_t = 10;
pub const GLSLANG_STAGE_MISS_NV: glslang_stage_t = 10;
pub const GLSLANG_STAGE_CALLABLE: glslang_stage_t = 11;
pub const GLSLANG_STAGE_CALLABLE_NV: glslang_stage_t = 11;
pub const GLSLANG_STAGE_TASK: glslang_stage_t = 12;
pub const GLSLANG_STAGE_TASK_NV: glslang_stage_t = 12;
pub const GLSLANG_STAGE_MESH: glslang_stage_t = 13;
pub const GLSLANG_STAGE_MESH_NV: glslang_stage_t = 13;
pub const GLSLANG_STAGE_COUNT: glslang_stage_t = 14;
pub type glslang_stage_t = ::std::os::raw::c_uint;
pub const GLSLANG_STAGE_VERTEX_MASK: glslang_stage_mask_t = 1;
pub const GLSLANG_STAGE_TESSCONTROL_MASK: glslang_stage_mask_t = 2;
pub const GLSLANG_STAGE_TESSEVALUATION_MASK: glslang_stage_mask_t = 4;
pub const GLSLANG_STAGE_GEOMETRY_MASK: glslang_stage_mask_t = 8;
pub const GLSLANG_STAGE_FRAGMENT_MASK: glslang_stage_mask_t = 16;
pub const GLSLANG_STAGE_COMPUTE_MASK: glslang_stage_mask_t = 32;
pub const GLSLANG_STAGE_RAYGEN_MASK: glslang_stage_mask_t = 64;
pub const GLSLANG_STAGE_RAYGEN_NV_MASK: glslang_stage_mask_t = 64;
pub const GLSLANG_STAGE_INTERSECT_MASK: glslang_stage_mask_t = 128;
pub const GLSLANG_STAGE_INTERSECT_NV_MASK: glslang_stage_mask_t = 128;
pub const GLSLANG_STAGE_ANYHIT_MASK: glslang_stage_mask_t = 256;
pub const GLSLANG_STAGE_ANYHIT_NV_MASK: glslang_stage_mask_t = 256;
pub const GLSLANG_STAGE_CLOSESTHIT_MASK: glslang_stage_mask_t = 512;
pub const GLSLANG_STAGE_CLOSESTHIT_NV_MASK: glslang_stage_mask_t = 512;
pub const GLSLANG_STAGE_MISS_MASK: glslang_stage_mask_t = 1024;
pub const GLSLANG_STAGE_MISS_NV_MASK: glslang_stage_mask_t = 1024;
pub const GLSLANG_STAGE_CALLABLE_MASK: glslang_stage_mask_t = 2048;
pub const GLSLANG_STAGE_CALLABLE_NV_MASK: glslang_stage_mask_t = 2048;
pub const GLSLANG_STAGE_TASK_MASK: glslang_stage_mask_t = 4096;
pub const GLSLANG_STAGE_TASK_NV_MASK: glslang_stage_mask_t = 4096;
pub const GLSLANG_STAGE_MESH_MASK: glslang_stage_mask_t = 8192;
pub const GLSLANG_STAGE_MESH_NV_MASK: glslang_stage_mask_t = 8192;
pub const GLSLANG_STAGE_MASK_COUNT: glslang_stage_mask_t = 8193;
pub type glslang_stage_mask_t = ::std::os::raw::c_uint;
pub const GLSLANG_SOURCE_NONE: glslang_source_t = 0;
pub const GLSLANG_SOURCE_GLSL: glslang_source_t = 1;
pub const GLSLANG_SOURCE_HLSL: glslang_source_t = 2;
pub const GLSLANG_SOURCE_COUNT: glslang_source_t = 3;
pub type glslang_source_t = ::std::os::raw::c_uint;
pub const GLSLANG_CLIENT_NONE: glslang_client_t = 0;
pub const GLSLANG_CLIENT_VULKAN: glslang_client_t = 1;
pub const GLSLANG_CLIENT_OPENGL: glslang_client_t = 2;
pub const GLSLANG_CLIENT_COUNT: glslang_client_t = 3;
pub type glslang_client_t = ::std::os::raw::c_uint;
pub const GLSLANG_TARGET_NONE: glslang_target_language_t = 0;
pub const GLSLANG_TARGET_SPV: glslang_target_language_t = 1;
pub const GLSLANG_TARGET_COUNT: glslang_target_language_t = 2;
pub type glslang_target_language_t = ::std::os::raw::c_uint;
pub const GLSLANG_TARGET_VULKAN_1_0: glslang_target_client_version_t = 4194304;
pub const GLSLANG_TARGET_VULKAN_1_1: glslang_target_client_version_t = 4198400;
pub const GLSLANG_TARGET_VULKAN_1_2: glslang_target_client_version_t = 4202496;
pub const GLSLANG_TARGET_VULKAN_1_3: glslang_target_client_version_t = 4206592;
pub const GLSLANG_TARGET_OPENGL_450: glslang_target_client_version_t = 450;
pub const GLSLANG_TARGET_CLIENT_VERSION_COUNT: glslang_target_client_version_t = 5;
pub type glslang_target_client_version_t = ::std::os::raw::c_uint;
pub const GLSLANG_TARGET_SPV_1_0: glslang_target_language_version_t = 65536;
pub const GLSLANG_TARGET_SPV_1_1: glslang_target_language_version_t = 65792;
pub const GLSLANG_TARGET_SPV_1_2: glslang_target_language_version_t = 66048;
pub const GLSLANG_TARGET_SPV_1_3: glslang_target_language_version_t = 66304;
pub const GLSLANG_TARGET_SPV_1_4: glslang_target_language_version_t = 66560;
pub const GLSLANG_TARGET_SPV_1_5: glslang_target_language_version_t = 66816;
pub const GLSLANG_TARGET_SPV_1_6: glslang_target_language_version_t = 67072;
pub const GLSLANG_TARGET_LANGUAGE_VERSION_COUNT: glslang_target_language_version_t = 7;
pub type glslang_target_language_version_t = ::std::os::raw::c_uint;
pub const GLSLANG_EX_VERTEX_FRAGMENT: glslang_executable_t = 0;
pub const GLSLANG_EX_FRAGMENT: glslang_executable_t = 1;
pub type glslang_executable_t = ::std::os::raw::c_uint;
pub const GLSLANG_OPT_NO_GENERATION: glslang_optimization_level_t = 0;
pub const GLSLANG_OPT_NONE: glslang_optimization_level_t = 1;
pub const GLSLANG_OPT_SIMPLE: glslang_optimization_level_t = 2;
pub const GLSLANG_OPT_FULL: glslang_optimization_level_t = 3;
pub const GLSLANG_OPT_LEVEL_COUNT: glslang_optimization_level_t = 4;
pub type glslang_optimization_level_t = ::std::os::raw::c_uint;
pub const GLSLANG_TEX_SAMP_TRANS_KEEP: glslang_texture_sampler_transform_mode_t = 0;
pub const GLSLANG_TEX_SAMP_TRANS_UPGRADE_TEXTURE_REMOVE_SAMPLER:
    glslang_texture_sampler_transform_mode_t = 1;
pub const GLSLANG_TEX_SAMP_TRANS_COUNT: glslang_texture_sampler_transform_mode_t = 2;
pub type glslang_texture_sampler_transform_mode_t = ::std::os::raw::c_uint;
pub const GLSLANG_MSG_DEFAULT_BIT: glslang_messages_t = 0;
pub const GLSLANG_MSG_RELAXED_ERRORS_BIT: glslang_messages_t = 1;
pub const GLSLANG_MSG_SUPPRESS_WARNINGS_BIT: glslang_messages_t = 2;
pub const GLSLANG_MSG_AST_BIT: glslang_messages_t = 4;
pub const GLSLANG_MSG_SPV_RULES_BIT: glslang_messages_t = 8;
pub const GLSLANG_MSG_VULKAN_RULES_BIT: glslang_messages_t = 16;
pub const GLSLANG_MSG_ONLY_PREPROCESSOR_BIT: glslang_messages_t = 32;
pub const GLSLANG_MSG_READ_HLSL_BIT: glslang_messages_t = 64;
pub const GLSLANG_MSG_CASCADING_ERRORS_BIT: glslang_messages_t = 128;
pub const GLSLANG_MSG_KEEP_UNCALLED_BIT: glslang_messages_t = 256;
pub const GLSLANG_MSG_HLSL_OFFSETS_BIT: glslang_messages_t = 512;
pub const GLSLANG_MSG_DEBUG_INFO_BIT: glslang_messages_t = 1024;
pub const GLSLANG_MSG_HLSL_ENABLE_16BIT_TYPES_BIT: glslang_messages_t = 2048;
pub const GLSLANG_MSG_HLSL_LEGALIZATION_BIT: glslang_messages_t = 4096;
pub const GLSLANG_MSG_HLSL_DX9_COMPATIBLE_BIT: glslang_messages_t = 8192;
pub const GLSLANG_MSG_BUILTIN_SYMBOL_TABLE_BIT: glslang_messages_t = 16384;
pub const GLSLANG_MSG_ENHANCED: glslang_messages_t = 32768;
pub const GLSLANG_MSG_ABSOLUTE_PATH: glslang_messages_t = 65536;
pub const GLSLANG_MSG_COUNT: glslang_messages_t = 65537;
pub type glslang_messages_t = ::std::os::raw::c_uint;
pub const GLSLANG_REFLECTION_DEFAULT_BIT: glslang_reflection_options_t = 0;
pub const GLSLANG_REFLECTION_STRICT_ARRAY_SUFFIX_BIT: glslang_reflection_options_t = 1;
pub const GLSLANG_REFLECTION_BASIC_ARRAY_SUFFIX_BIT: glslang_reflection_options_t = 2;
pub const GLSLANG_REFLECTION_INTERMEDIATE_IOO_BIT: glslang_reflection_options_t = 4;
pub const GLSLANG_REFLECTION_SEPARATE_BUFFERS_BIT: glslang_reflection_options_t = 8;
pub const GLSLANG_REFLECTION_ALL_BLOCK_VARIABLES_BIT: glslang_reflection_options_t = 16;
pub const GLSLANG_REFLECTION_UNWRAP_IO_BLOCKS_BIT: glslang_reflection_options_t = 32;
pub const GLSLANG_REFLECTION_ALL_IO_VARIABLES_BIT: glslang_reflection_options_t = 64;
pub const GLSLANG_REFLECTION_SHARED_STD140_SSBO_BIT: glslang_reflection_options_t = 128;
pub const GLSLANG_REFLECTION_SHARED_STD140_UBO_BIT: glslang_reflection_options_t = 256;
pub const GLSLANG_REFLECTION_COUNT: glslang_reflection_options_t = 257;
pub type glslang_reflection_options_t = ::std::os::raw::c_uint;
pub const GLSLANG_BAD_PROFILE: glslang_profile_t = 0;
pub const GLSLANG_NO_PROFILE: glslang_profile_t = 1;
pub const GLSLANG_CORE_PROFILE: glslang_profile_t = 2;
pub const GLSLANG_COMPATIBILITY_PROFILE: glslang_profile_t = 4;
pub const GLSLANG_ES_PROFILE: glslang_profile_t = 8;
pub const GLSLANG_PROFILE_COUNT: glslang_profile_t = 9;
pub type glslang_profile_t = ::std::os::raw::c_uint;
pub const GLSLANG_SHADER_DEFAULT_BIT: glslang_shader_options_t = 0;
pub const GLSLANG_SHADER_AUTO_MAP_BINDINGS: glslang_shader_options_t = 1;
pub const GLSLANG_SHADER_AUTO_MAP_LOCATIONS: glslang_shader_options_t = 2;
pub const GLSLANG_SHADER_VULKAN_RULES_RELAXED: glslang_shader_options_t = 4;
pub const GLSLANG_SHADER_COUNT: glslang_shader_options_t = 5;
pub type glslang_shader_options_t = ::std::os::raw::c_uint;
pub const GLSLANG_RESOURCE_TYPE_SAMPLER: glslang_resource_type_t = 0;
pub const GLSLANG_RESOURCE_TYPE_TEXTURE: glslang_resource_type_t = 1;
pub const GLSLANG_RESOURCE_TYPE_IMAGE: glslang_resource_type_t = 2;
pub const GLSLANG_RESOURCE_TYPE_UBO: glslang_resource_type_t = 3;
pub const GLSLANG_RESOURCE_TYPE_SSBO: glslang_resource_type_t = 4;
pub const GLSLANG_RESOURCE_TYPE_UAV: glslang_resource_type_t = 5;
pub const GLSLANG_RESOURCE_TYPE_COUNT: glslang_resource_type_t = 6;
pub type glslang_resource_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_shader_s {
    _unused: [u8; 0],
}
pub type glslang_shader_t = glslang_shader_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_program_s {
    _unused: [u8; 0],
}
pub type glslang_program_t = glslang_program_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_limits_s {
    pub non_inductive_for_loops: bool,
    pub while_loops: bool,
    pub do_while_loops: bool,
    pub general_uniform_indexing: bool,
    pub general_attribute_matrix_vector_indexing: bool,
    pub general_varying_indexing: bool,
    pub general_sampler_indexing: bool,
    pub general_variable_indexing: bool,
    pub general_constant_matrix_vector_indexing: bool,
}
pub type glslang_limits_t = glslang_limits_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glslang_resource_s {
    pub max_lights: ::std::os::raw::c_int,
    pub max_clip_planes: ::std::os::raw::c_int,
    pub max_texture_units: ::std::os::raw::c_int,
    pub max_texture_coords: ::std::os::raw::c_int,
    pub max_vertex_attribs: ::std::os::raw::c_int,
    pub max_vertex_uniform_components: ::std::os::raw::c_int,
    pub max_varying_floats: ::std::os::raw::c_int,
    pub max_vertex_texture_image_units: ::std::os::raw::c_int,
    pub max_combined_texture_image_units: ::std::os::raw::c_int,
    pub max_texture_image_units: ::std::os::raw::c_int,
    pub max_fragment_uniform_components: ::std::os::raw::c_int,
    pub max_draw_buffers: ::std::os::raw::c_int,
    pub max_vertex_uniform_vectors: ::std::os::raw::c_int,
    pub max_varying_vectors: ::std::os::raw::c_int,
    pub max_fragment_uniform_vectors: ::std::os::raw::c_int,
    pub max_vertex_output_vectors: ::std::os::raw::c_int,
    pub max_fragment_input_vectors: ::std::os::raw::c_int,
    pub min_program_texel_offset: ::std::os::raw::c_int,
    pub max_program_texel_offset: ::std::os::raw::c_int,
    pub max_clip_distances: ::std::os::raw::c_int,
    pub max_compute_work_group_count_x: ::std::os::raw::c_int,
    pub max_compute_work_group_count_y: ::std::os::raw::c_int,
    pub max_compute_work_group_count_z: ::std::os::raw::c_int,
    pub max_compute_work_group_size_x: ::std::os::raw::c_int,
    pub max_compute_work_group_size_y: ::std::os::raw::c_int,
    pub max_compute_work_group_size_z: ::std::os::raw::c_int,
    pub max_compute_uniform_components: ::std::os::raw::c_int,
    pub max_compute_texture_image_units: ::std::os::raw::c_int,
    pub max_compute_image_uniforms: ::std::os::raw::c_int,
    pub max_compute_atomic_counters: ::std::os::raw::c_int,
    pub max_compute_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_varying_components: ::std::os::raw::c_int,
    pub max_vertex_output_components: ::std::os::raw::c_int,
    pub max_geometry_input_components: ::std::os::raw::c_int,
    pub max_geometry_output_components: ::std::os::raw::c_int,
    pub max_fragment_input_components: ::std::os::raw::c_int,
    pub max_image_units: ::std::os::raw::c_int,
    pub max_combined_image_units_and_fragment_outputs: ::std::os::raw::c_int,
    pub max_combined_shader_output_resources: ::std::os::raw::c_int,
    pub max_image_samples: ::std::os::raw::c_int,
    pub max_vertex_image_uniforms: ::std::os::raw::c_int,
    pub max_tess_control_image_uniforms: ::std::os::raw::c_int,
    pub max_tess_evaluation_image_uniforms: ::std::os::raw::c_int,
    pub max_geometry_image_uniforms: ::std::os::raw::c_int,
    pub max_fragment_image_uniforms: ::std::os::raw::c_int,
    pub max_combined_image_uniforms: ::std::os::raw::c_int,
    pub max_geometry_texture_image_units: ::std::os::raw::c_int,
    pub max_geometry_output_vertices: ::std::os::raw::c_int,
    pub max_geometry_total_output_components: ::std::os::raw::c_int,
    pub max_geometry_uniform_components: ::std::os::raw::c_int,
    pub max_geometry_varying_components: ::std::os::raw::c_int,
    pub max_tess_control_input_components: ::std::os::raw::c_int,
    pub max_tess_control_output_components: ::std::os::raw::c_int,
    pub max_tess_control_texture_image_units: ::std::os::raw::c_int,
    pub max_tess_control_uniform_components: ::std::os::raw::c_int,
    pub max_tess_control_total_output_components: ::std::os::raw::c_int,
    pub max_tess_evaluation_input_components: ::std::os::raw::c_int,
    pub max_tess_evaluation_output_components: ::std::os::raw::c_int,
    pub max_tess_evaluation_texture_image_units: ::std::os::raw::c_int,
    pub max_tess_evaluation_uniform_components: ::std::os::raw::c_int,
    pub max_tess_patch_components: ::std::os::raw::c_int,
    pub max_patch_vertices: ::std::os::raw::c_int,
    pub max_tess_gen_level: ::std::os::raw::c_int,
    pub max_viewports: ::std::os::raw::c_int,
    pub max_vertex_atomic_counters: ::std::os::raw::c_int,
    pub max_tess_control_atomic_counters: ::std::os::raw::c_int,
    pub max_tess_evaluation_atomic_counters: ::std::os::raw::c_int,
    pub max_geometry_atomic_counters: ::std::os::raw::c_int,
    pub max_fragment_atomic_counters: ::std::os::raw::c_int,
    pub max_combined_atomic_counters: ::std::os::raw::c_int,
    pub max_atomic_counter_bindings: ::std::os::raw::c_int,
    pub max_vertex_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_tess_control_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_tess_evaluation_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_geometry_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_fragment_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_combined_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_atomic_counter_buffer_size: ::std::os::raw::c_int,
    pub max_transform_feedback_buffers: ::std::os::raw::c_int,
    pub max_transform_feedback_interleaved_components: ::std::os::raw::c_int,
    pub max_cull_distances: ::std::os::raw::c_int,
    pub max_combined_clip_and_cull_distances: ::std::os::raw::c_int,
    pub max_samples: ::std::os::raw::c_int,
    pub max_mesh_output_vertices_nv: ::std::os::raw::c_int,
    pub max_mesh_output_primitives_nv: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_x_nv: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_y_nv: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_z_nv: ::std::os::raw::c_int,
    pub max_task_work_group_size_x_nv: ::std::os::raw::c_int,
    pub max_task_work_group_size_y_nv: ::std::os::raw::c_int,
    pub max_task_work_group_size_z_nv: ::std::os::raw::c_int,
    pub max_mesh_view_count_nv: ::std::os::raw::c_int,
    pub max_mesh_output_vertices_ext: ::std::os::raw::c_int,
    pub max_mesh_output_primitives_ext: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_x_ext: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_y_ext: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_z_ext: ::std::os::raw::c_int,
    pub max_task_work_group_size_x_ext: ::std::os::raw::c_int,
    pub max_task_work_group_size_y_ext: ::std::os::raw::c_int,
    pub max_task_work_group_size_z_ext: ::std::os::raw::c_int,
    pub max_mesh_view_count_ext: ::std::os::raw::c_int,
    pub __bindgen_anon_1: glslang_resource_s__bindgen_ty_1,
    pub limits: glslang_limits_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union glslang_resource_s__bindgen_ty_1 {
    pub max_dual_source_draw_buffers_ext: ::std::os::raw::c_int,
    pub maxDualSourceDrawBuffersEXT: ::std::os::raw::c_int,
}
pub type glslang_resource_t = glslang_resource_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glsl_include_result_s {
    pub header_name: *const ::std::os::raw::c_char,
    pub header_data: *const ::std::os::raw::c_char,
    pub header_length: usize,
}
pub type glsl_include_result_t = glsl_include_result_s;
pub type glsl_include_local_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        header_name: *const ::std::os::raw::c_char,
        includer_name: *const ::std::os::raw::c_char,
        include_depth: usize,
    ) -> *mut glsl_include_result_t,
>;
pub type glsl_include_system_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        header_name: *const ::std::os::raw::c_char,
        includer_name: *const ::std::os::raw::c_char,
        include_depth: usize,
    ) -> *mut glsl_include_result_t,
>;
pub type glsl_free_include_result_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        result: *mut glsl_include_result_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glsl_include_callbacks_s {
    pub include_system: glsl_include_system_func,
    pub include_local: glsl_include_local_func,
    pub free_include_result: glsl_free_include_result_func,
}
pub type glsl_include_callbacks_t = glsl_include_callbacks_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_input_s {
    pub language: glslang_source_t,
    pub stage: glslang_stage_t,
    pub client: glslang_client_t,
    pub client_version: glslang_target_client_version_t,
    pub target_language: glslang_target_language_t,
    pub target_language_version: glslang_target_language_version_t,
    pub code: *const ::std::os::raw::c_char,
    pub default_version: ::std::os::raw::c_int,
    pub default_profile: glslang_profile_t,
    pub force_default_version_and_profile: ::std::os::raw::c_int,
    pub forward_compatible: ::std::os::raw::c_int,
    pub messages: glslang_messages_t,
    pub resource: *const glslang_resource_t,
    pub callbacks: glsl_include_callbacks_t,
    pub callbacks_ctx: *mut ::std::os::raw::c_void,
}
pub type glslang_input_t = glslang_input_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_spv_options_s {
    pub generate_debug_info: bool,
    pub strip_debug_info: bool,
    pub disable_optimizer: bool,
    pub optimize_size: bool,
    pub disassemble: bool,
    pub validate: bool,
    pub emit_nonsemantic_shader_debug_info: bool,
    pub emit_nonsemantic_shader_debug_source: bool,
    pub compile_only: bool,
}
pub type glslang_spv_options_t = glslang_spv_options_s;
pub type argus_texture_data_t = *const ::std::os::raw::c_void;
#[repr(C)]
pub struct ArgusVertex2d {
    pub position: argus_vector_2f_t,
    pub normal: argus_vector_2f_t,
    pub color: argus_vector_4f_t,
    pub tex_coord: argus_vector_2f_t,
}
#[repr(C)]
pub struct ArgusVertex3d {
    pub position: argus_vector_3f_t,
    pub normal: argus_vector_3f_t,
    pub color: argus_vector_4f_t,
    pub tex_coord: argus_vector_2f_t,
}
pub type argus_light_2d_t = *mut ::std::os::raw::c_void;
pub type argus_light_2d_const_t = *const ::std::os::raw::c_void;
pub const ARGUS_LIGHT_2D_TYPE_POINT: ArgusLight2dType = 0;
pub type ArgusLight2dType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArgusLight2dParameters {
    pub intensity: f32,
    pub falloff_gradient: u32,
    pub falloff_multiplier: f32,
    pub falloff_buffer: f32,
    pub shadow_falloff_gradient: u32,
    pub shadow_falloff_multiplier: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArgusRenderPrimitive2d {
    pub vertices: *const ArgusVertex2d,
    pub vertex_count: usize,
}
pub type argus_render_group_2d_t = *mut ::std::os::raw::c_void;
pub type argus_render_group_2d_const_t = *const ::std::os::raw::c_void;
pub type argus_render_object_2d_t = *mut ::std::os::raw::c_void;
pub type argus_render_object_2d_const_t = *const ::std::os::raw::c_void;
pub type argus_processed_render_object_2d_t = *mut ::std::os::raw::c_void;
pub type argus_process_render_obj_2d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: argus_render_object_2d_const_t,
        transform: argus_matrix_4x4_t,
        extra: *mut ::std::os::raw::c_void,
    ) -> argus_processed_render_object_2d_t,
>;
pub type argus_update_render_obj_2d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: argus_render_object_2d_const_t,
        proc_obj: argus_processed_render_object_2d_t,
        transform: argus_matrix_4x4_t,
        is_transform_dirty: bool,
        extra: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArgusProcessedObjectMap {
    pub count: usize,
    pub capacity: usize,
    pub keys: *mut ArgusHandle,
    pub values: *mut argus_processed_render_object_2d_t,
}
extern "C" {
    pub fn argus_scene_find(id: *const ::std::os::raw::c_char) -> argus_scene_t;
    pub fn argus_scene_get_type(scene: argus_scene_const_t) -> ArgusSceneType;
    pub fn argus_attached_viewport_get_type(
        viewport: argus_attached_viewport_const_t,
    ) -> ArgusSceneType;
    pub fn argus_attached_viewport_get_viewport(
        viewport: argus_attached_viewport_const_t,
    ) -> ArgusViewport;
    pub fn argus_attached_viewport_get_z_index(viewport: argus_attached_viewport_const_t) -> u32;
    pub fn argus_attached_viewport_get_postprocessing_shaders_count(
        viewport: argus_attached_viewport_const_t,
    ) -> usize;
    pub fn argus_attached_viewport_get_postprocessing_shaders(
        viewport: argus_attached_viewport_const_t,
        dest: *mut *const ::std::os::raw::c_char,
        count: usize,
    );
    pub fn argus_attached_viewport_add_postprocessing_shader(
        viewport: argus_attached_viewport_t,
        shader_uid: *const ::std::os::raw::c_char,
    );
    pub fn argus_attached_viewport_remove_postprocessing_shader(
        viewport: argus_attached_viewport_t,
        shader_uid: *const ::std::os::raw::c_char,
    );
    pub fn argus_register_render_backend(
        id: *const ::std::os::raw::c_char,
        activate_fn: ArgusActivateRenderBackendFn,
    );
    pub fn argus_transform_2d_as_matrix(
        transform: *const ArgusTransform2d,
        anchor_x: f32,
        anchor_y: f32,
    ) -> argus_matrix_4x4_t;
    pub fn argus_transform_2d_get_translation_matrix(
        transform: *const ArgusTransform2d,
    ) -> argus_matrix_4x4_t;
    pub fn argus_transform_2d_get_rotation_matrix(
        transform: *const ArgusTransform2d,
    ) -> argus_matrix_4x4_t;
    pub fn argus_transform_2d_get_scale_matrix(
        transform: *const ArgusTransform2d,
    ) -> argus_matrix_4x4_t;
    pub fn argus_transform_2d_inverse(transform: *const ArgusTransform2d) -> ArgusTransform2d;
    pub fn argus_camera_2d_get_id(camera: argus_camera_2d_const_t)
        -> *const ::std::os::raw::c_char;
    pub fn argus_camera_2d_get_scene(camera: argus_camera_2d_const_t) -> argus_scene_2d_t;
    pub fn argus_camera_2d_peek_transform(camera: argus_camera_2d_const_t) -> ArgusTransform2d;
    pub fn argus_camera_2d_get_transform(
        camera: argus_camera_2d_t,
        out_dirty: *mut bool,
    ) -> ArgusTransform2d;
    pub fn argus_camera_2d_set_transform(camera: argus_camera_2d_t, transform: ArgusTransform2d);
    pub fn argus_attached_viewport_2d_get_camera(
        viewport: argus_attached_viewport_2d_t,
    ) -> argus_camera_2d_t;
    pub fn argus_canvas_get_window(canvas: argus_canvas_const_t) -> argus_window_t;
    pub fn argus_canvas_get_viewports_2d_count(canvas: argus_canvas_const_t) -> usize;
    pub fn argus_canvas_get_viewports_2d(
        canvas: argus_canvas_const_t,
        dest: *mut argus_attached_viewport_2d_t,
        count: usize,
    );
    pub fn argus_canvas_find_viewport(
        canvas: argus_canvas_const_t,
        id: *const ::std::os::raw::c_char,
    ) -> argus_attached_viewport_t;
    pub fn argus_canvas_attach_viewport_2d(
        canvas: argus_canvas_t,
        id: *const ::std::os::raw::c_char,
        viewport: ArgusViewport,
        camera: argus_camera_2d_t,
        z_index: u32,
    ) -> argus_attached_viewport_2d_t;
    pub fn argus_canvas_attach_default_viewport_2d(
        canvas: argus_canvas_t,
        id: *const ::std::os::raw::c_char,
        camera: argus_camera_2d_t,
        z_index: u32,
    ) -> argus_attached_viewport_2d_t;
    pub fn argus_canvas_detach_viewport_2d(
        canvas: argus_canvas_t,
        id: *const ::std::os::raw::c_char,
    );
    pub fn argus_material_get_texture_uid(
        material: argus_material_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_material_get_shader_uids_count(material: argus_material_t) -> usize;
    pub fn argus_material_get_shader_uids(
        material: argus_material_t,
        out_uids: *mut *const ::std::os::raw::c_char,
        count: usize,
    );
    pub fn argus_shader_refl_info_new() -> argus_shader_refl_info_t;
    pub fn argus_shader_refl_info_delete(refl: argus_shader_refl_info_t);
    pub fn argus_shader_refl_info_has_attr(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
    pub fn argus_shader_refl_info_get_attr_loc(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
        out_found: *mut bool,
    ) -> u32;
    pub fn argus_shader_refl_info_set_attr_loc(
        refl: argus_shader_refl_info_t,
        name: *const ::std::os::raw::c_char,
        loc: u32,
    );
    pub fn argus_shader_refl_info_has_output(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
    pub fn argus_shader_refl_info_get_output_loc(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
        out_found: *mut bool,
    ) -> u32;
    pub fn argus_shader_refl_info_set_output_loc(
        refl: argus_shader_refl_info_t,
        name: *const ::std::os::raw::c_char,
        loc: u32,
    );
    pub fn argus_shader_refl_info_has_uniform_var(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
    pub fn argus_shader_refl_info_has_uniform(
        refl: argus_shader_refl_info_const_t,
        ubo: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
    pub fn argus_shader_refl_info_get_uniform_var_loc(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
        out_found: *mut bool,
    ) -> u32;
    pub fn argus_shader_refl_info_get_uniform_loc(
        refl: argus_shader_refl_info_const_t,
        ubo: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        out_found: *mut bool,
    ) -> u32;
    pub fn argus_shader_refl_info_set_uniform_var_loc(
        refl: argus_shader_refl_info_t,
        name: *const ::std::os::raw::c_char,
        loc: u32,
    );
    pub fn argus_shader_refl_info_set_uniform_loc(
        refl: argus_shader_refl_info_t,
        ubo: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        loc: u32,
    );
    pub fn argus_shader_refl_info_has_ubo(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
    pub fn argus_shader_refl_info_get_ubo_binding(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
        out_found: *mut bool,
    ) -> u32;
    pub fn argus_shader_refl_info_set_ubo_binding(
        refl: argus_shader_refl_info_t,
        name: *const ::std::os::raw::c_char,
        binding: u32,
    );
    pub fn argus_shader_refl_info_get_ubo_instance_name(
        refl: argus_shader_refl_info_const_t,
        name: *const ::std::os::raw::c_char,
        out_found: *mut bool,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_shader_refl_info_set_ubo_instance_name(
        refl: argus_shader_refl_info_t,
        ubo_name: *const ::std::os::raw::c_char,
        instance_name: *const ::std::os::raw::c_char,
    );
    pub fn argus_shader_new(
        uid: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        stage: ArgusShaderStage,
        src: *const ::std::os::raw::c_uchar,
        src_len: usize,
    ) -> argus_shader_t;
    pub fn argus_shader_copy(shader: argus_shader_const_t) -> argus_shader_t;
    pub fn argus_shader_delete(shader: argus_shader_t);
    pub fn argus_shader_get_uid(shader: argus_shader_const_t) -> *const ::std::os::raw::c_char;
    pub fn argus_shader_get_type(shader: argus_shader_const_t) -> *const ::std::os::raw::c_char;
    pub fn argus_shader_get_stage(shader: argus_shader_const_t) -> ArgusShaderStage;
    pub fn argus_shader_get_source(
        shader: argus_shader_const_t,
        out_ptr: *mut *const ::std::os::raw::c_uchar,
        out_len: *mut usize,
    );
    pub fn glslang_initialize_process() -> ::std::os::raw::c_int;
    pub fn glslang_finalize_process();
    pub fn glslang_shader_create(input: *const glslang_input_t) -> *mut glslang_shader_t;
    pub fn glslang_shader_delete(shader: *mut glslang_shader_t);
    pub fn glslang_shader_set_preamble(
        shader: *mut glslang_shader_t,
        s: *const ::std::os::raw::c_char,
    );
    pub fn glslang_shader_shift_binding(
        shader: *mut glslang_shader_t,
        res: glslang_resource_type_t,
        base: ::std::os::raw::c_uint,
    );
    pub fn glslang_shader_shift_binding_for_set(
        shader: *mut glslang_shader_t,
        res: glslang_resource_type_t,
        base: ::std::os::raw::c_uint,
        set: ::std::os::raw::c_uint,
    );
    pub fn glslang_shader_set_options(
        shader: *mut glslang_shader_t,
        options: ::std::os::raw::c_int,
    );
    pub fn glslang_shader_set_glsl_version(
        shader: *mut glslang_shader_t,
        version: ::std::os::raw::c_int,
    );
    pub fn glslang_shader_preprocess(
        shader: *mut glslang_shader_t,
        input: *const glslang_input_t,
    ) -> ::std::os::raw::c_int;
    pub fn glslang_shader_parse(
        shader: *mut glslang_shader_t,
        input: *const glslang_input_t,
    ) -> ::std::os::raw::c_int;
    pub fn glslang_shader_get_preprocessed_code(
        shader: *mut glslang_shader_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn glslang_shader_get_info_log(
        shader: *mut glslang_shader_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn glslang_shader_get_info_debug_log(
        shader: *mut glslang_shader_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn glslang_program_create() -> *mut glslang_program_t;
    pub fn glslang_program_delete(program: *mut glslang_program_t);
    pub fn glslang_program_add_shader(
        program: *mut glslang_program_t,
        shader: *mut glslang_shader_t,
    );
    pub fn glslang_program_link(
        program: *mut glslang_program_t,
        messages: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn glslang_program_add_source_text(
        program: *mut glslang_program_t,
        stage: glslang_stage_t,
        text: *const ::std::os::raw::c_char,
        len: usize,
    );
    pub fn glslang_program_set_source_file(
        program: *mut glslang_program_t,
        stage: glslang_stage_t,
        file: *const ::std::os::raw::c_char,
    );
    pub fn glslang_program_map_io(program: *mut glslang_program_t) -> ::std::os::raw::c_int;
    pub fn glslang_program_SPIRV_generate(program: *mut glslang_program_t, stage: glslang_stage_t);
    pub fn glslang_program_SPIRV_generate_with_options(
        program: *mut glslang_program_t,
        stage: glslang_stage_t,
        spv_options: *mut glslang_spv_options_t,
    );
    pub fn glslang_program_SPIRV_get_size(program: *mut glslang_program_t) -> usize;
    pub fn glslang_program_SPIRV_get(
        program: *mut glslang_program_t,
        arg1: *mut ::std::os::raw::c_uint,
    );
    pub fn glslang_program_SPIRV_get_ptr(
        program: *mut glslang_program_t,
    ) -> *mut ::std::os::raw::c_uint;
    pub fn glslang_program_SPIRV_get_messages(
        program: *mut glslang_program_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn glslang_program_get_info_log(
        program: *mut glslang_program_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn glslang_program_get_info_debug_log(
        program: *mut glslang_program_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_compile_glsl_to_spirv(
        glsl_sources: *const argus_shader_const_t,
        glsl_sources_count: usize,
        client: glslang_client_t,
        client_version: glslang_target_client_version_t,
        spirv_version: glslang_target_language_version_t,
        out_shaders: *mut argus_shader_t,
        out_refl: *mut argus_shader_refl_info_t,
    );
    pub fn argus_texture_data_get_width(tex_data: argus_texture_data_t) -> u32;
    pub fn argus_texture_data_get_height(tex_data: argus_texture_data_t) -> u32;
    pub fn argus_texture_data_get_pixel_data(
        tex_data: argus_texture_data_t,
    ) -> *const *const ::std::os::raw::c_uchar;
    pub fn argus_light_2d_get_handle(light: argus_light_2d_const_t) -> ArgusHandle;
    pub fn argus_light_2d_get_type(light: argus_light_2d_const_t) -> ArgusLight2dType;
    pub fn argus_light_2d_is_occludable(light: argus_light_2d_const_t) -> bool;
    pub fn argus_light_2d_get_color(light: argus_light_2d_const_t) -> argus_vector_3f_t;
    pub fn argus_light_2d_set_color(light: argus_light_2d_t, color: argus_vector_3f_t);
    pub fn argus_light_2d_get_parameters(light: argus_light_2d_const_t) -> ArgusLight2dParameters;
    pub fn argus_light_2d_set_parameters(light: argus_light_2d_t, params: ArgusLight2dParameters);
    pub fn argus_light_2d_get_transform(light: argus_light_2d_const_t) -> ArgusTransform2d;
    pub fn argus_light_2d_set_transform(light: argus_light_2d_t, transform: ArgusTransform2d);
    pub fn argus_render_group_2d_get_handle(group: argus_render_group_2d_const_t) -> ArgusHandle;
    pub fn argus_render_group_2d_get_scene(
        group: argus_render_group_2d_const_t,
    ) -> argus_scene_2d_t;
    pub fn argus_render_group_2d_get_parent(
        group: argus_render_group_2d_const_t,
    ) -> argus_render_group_2d_t;
    pub fn argus_render_group_2d_add_group(
        group: argus_render_group_2d_t,
        transform: ArgusTransform2d,
    ) -> ArgusHandle;
    pub fn argus_render_group_2d_add_object(
        group: argus_render_group_2d_t,
        material: *const ::std::os::raw::c_char,
        primitives: *const ArgusRenderPrimitive2d,
        primitives_count: usize,
        anchor_point: argus_vector_2f_t,
        atlas_stride: argus_vector_2f_t,
        z_index: u32,
        light_opacity: f32,
        transform: ArgusTransform2d,
    ) -> ArgusHandle;
    pub fn argus_render_group_2d_remove_group(group: argus_render_group_2d_t, handle: ArgusHandle);
    pub fn argus_render_group_2d_remove_object(group: argus_render_group_2d_t, handle: ArgusHandle);
    pub fn argus_render_group_2d_peek_transform(
        group: argus_render_group_2d_const_t,
    ) -> ArgusTransform2d;
    pub fn argus_render_group_2d_get_transform(group: argus_render_group_2d_t) -> ArgusTransform2d;
    pub fn argus_render_group_2d_set_transform(
        group: argus_render_group_2d_t,
        transform: ArgusTransform2d,
    );
    pub fn argus_render_group_2d_copy(group: argus_render_group_2d_t) -> argus_render_group_2d_t;
    pub fn argus_scene_2d_create(id: *const ::std::os::raw::c_char) -> argus_scene_2d_t;
    pub fn argus_scene_2d_is_lighting_enabled(scene: argus_scene_2d_const_t) -> bool;
    pub fn argus_scene_2d_set_lighting_enabled(scene: argus_scene_2d_t, enabled: bool);
    pub fn argus_scene_2d_peek_ambient_light_level(scene: argus_scene_2d_const_t) -> f32;
    pub fn argus_scene_2d_get_ambient_light_level(
        scene: argus_scene_2d_t,
        out_dirty: *mut bool,
    ) -> f32;
    pub fn argus_scene_2d_set_ambient_light_level(scene: argus_scene_2d_t, level: f32);
    pub fn argus_scene_2d_peek_ambient_light_color(
        scene: argus_scene_2d_const_t,
    ) -> argus_vector_3f_t;
    pub fn argus_scene_2d_get_ambient_light_color(
        scene: argus_scene_2d_t,
        out_dirty: *mut bool,
    ) -> argus_vector_3f_t;
    pub fn argus_scene_2d_set_ambient_light_color(
        scene: argus_scene_2d_t,
        color: argus_vector_3f_t,
    );
    pub fn argus_scene_2d_get_lights_count(scene: argus_scene_2d_t) -> usize;
    pub fn argus_scene_2d_get_lights(
        scene: argus_scene_2d_t,
        dest: *mut argus_light_2d_t,
        count: usize,
    );
    pub fn argus_scene_2d_get_lights_count_for_render(scene: argus_scene_2d_t) -> usize;
    pub fn argus_scene_2d_get_lights_for_render(
        scene: argus_scene_2d_t,
        dest: *mut argus_light_2d_t,
        count: usize,
    );
    pub fn argus_scene_2d_add_light(
        scene: argus_scene_2d_t,
        type_: ArgusLight2dType,
        is_occludable: bool,
        color: argus_vector_3f_t,
        params: ArgusLight2dParameters,
        initial_transform: ArgusTransform2d,
    ) -> ArgusHandle;
    pub fn argus_scene_2d_get_light(
        scene: argus_scene_2d_t,
        handle: ArgusHandle,
    ) -> argus_light_2d_t;
    pub fn argus_scene_2d_remove_light(scene: argus_scene_2d_t, handle: ArgusHandle);
    pub fn argus_scene_2d_get_group(
        scene: argus_scene_2d_t,
        handle: ArgusHandle,
    ) -> argus_render_group_2d_t;
    pub fn argus_scene_2d_get_object(
        scene: argus_scene_2d_t,
        handle: ArgusHandle,
    ) -> argus_render_object_2d_t;
    pub fn argus_scene_2d_add_group(
        scene: argus_scene_2d_t,
        transform: ArgusTransform2d,
    ) -> ArgusHandle;
    pub fn argus_scene_2d_add_object(
        scene: argus_scene_2d_t,
        material: *const ::std::os::raw::c_char,
        primitives: *const ArgusRenderPrimitive2d,
        primitives_count: usize,
        anchor_point: argus_vector_2f_t,
        atlas_stride: argus_vector_2f_t,
        z_index: u32,
        light_opacity: f32,
        transform: ArgusTransform2d,
    ) -> ArgusHandle;
    pub fn argus_scene_2d_remove_group(scene: argus_scene_2d_t, handle: ArgusHandle);
    pub fn argus_scene_2d_remove_object(scene: argus_scene_2d_t, handle: ArgusHandle);
    pub fn argus_scene_2d_find_camera(
        scene: argus_scene_2d_const_t,
        id: *const ::std::os::raw::c_char,
    ) -> argus_camera_2d_t;
    pub fn argus_scene_2d_create_camera(
        scene: argus_scene_2d_t,
        id: *const ::std::os::raw::c_char,
    ) -> argus_camera_2d_t;
    pub fn argus_scene_2d_destroy_camera(
        scene: argus_scene_2d_t,
        id: *const ::std::os::raw::c_char,
    );
    pub fn argus_scene_2d_lock_render_state(scene: argus_scene_2d_t);
    pub fn argus_scene_2d_unlock_render_state(scene: argus_scene_2d_t);
    pub fn argus_render_object_2d_get_handle(obj: argus_render_object_2d_const_t) -> ArgusHandle;
    pub fn argus_render_object_2d_get_scene(
        obj: argus_render_object_2d_const_t,
    ) -> argus_scene_2d_const_t;
    pub fn argus_render_object_2d_get_parent(
        obj: argus_render_object_2d_const_t,
    ) -> argus_render_group_2d_const_t;
    pub fn argus_render_object_2d_get_material(
        obj: argus_render_object_2d_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_render_object_2d_get_primitives_count(
        obj: argus_render_object_2d_const_t,
    ) -> usize;
    pub fn argus_render_object_2d_get_anchor_point(
        obj: argus_render_object_2d_const_t,
    ) -> argus_vector_2f_t;
    pub fn argus_render_object_2d_get_atlas_stride(
        obj: argus_render_object_2d_const_t,
    ) -> argus_vector_2f_t;
    pub fn argus_render_object_2d_get_z_index(obj: argus_render_object_2d_const_t) -> u32;
    pub fn argus_render_object_2d_get_light_opacity(obj: argus_render_object_2d_const_t) -> f32;
    pub fn argus_render_object_2d_set_light_opacity(obj: argus_render_object_2d_t, opacity: f32);
    pub fn argus_render_object_2d_get_active_frame(
        obj: argus_render_object_2d_t,
        out_dirty: *mut bool,
    ) -> argus_vector_2u_t;
    pub fn argus_render_object_2d_set_active_frame(
        obj: argus_render_object_2d_t,
        frame: argus_vector_2u_t,
    );
    pub fn argus_render_object_2d_peek_transform(
        obj: argus_render_object_2d_const_t,
    ) -> ArgusTransform2d;
    pub fn argus_render_object_2d_get_transform(obj: argus_render_object_2d_t) -> ArgusTransform2d;
    pub fn argus_render_object_2d_set_transform(
        obj: argus_render_object_2d_t,
        transform: ArgusTransform2d,
    );
    pub fn argus_render_object_2d_copy(
        obj: argus_render_object_2d_const_t,
        parent: argus_render_group_2d_t,
    ) -> argus_render_object_2d_t;
    pub fn argus_process_objects_2d(
        scene: argus_scene_2d_const_t,
        obj_map: *mut ArgusProcessedObjectMap,
        process_new_fn: argus_process_render_obj_2d_fn_t,
        update_fn: argus_update_render_obj_2d_fn_t,
        extra: *mut ::std::os::raw::c_void,
    );
    pub fn argus_processed_object_map_free(map: *mut ArgusProcessedObjectMap);
}
