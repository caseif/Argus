/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_camel_case_types, unused_imports, unused_qualifications)]
use super::*;

pub const KB_SCANCODE_UNKNOWN: ArgusKeyboardScancode = 0;
pub const KB_SCANCODE_A: ArgusKeyboardScancode = 4;
pub const KB_SCANCODE_B: ArgusKeyboardScancode = 5;
pub const KB_SCANCODE_C: ArgusKeyboardScancode = 6;
pub const KB_SCANCODE_D: ArgusKeyboardScancode = 7;
pub const KB_SCANCODE_E: ArgusKeyboardScancode = 8;
pub const KB_SCANCODE_F: ArgusKeyboardScancode = 9;
pub const KB_SCANCODE_G: ArgusKeyboardScancode = 10;
pub const KB_SCANCODE_H: ArgusKeyboardScancode = 11;
pub const KB_SCANCODE_I: ArgusKeyboardScancode = 12;
pub const KB_SCANCODE_J: ArgusKeyboardScancode = 13;
pub const KB_SCANCODE_K: ArgusKeyboardScancode = 14;
pub const KB_SCANCODE_L: ArgusKeyboardScancode = 15;
pub const KB_SCANCODE_M: ArgusKeyboardScancode = 16;
pub const KB_SCANCODE_N: ArgusKeyboardScancode = 17;
pub const KB_SCANCODE_O: ArgusKeyboardScancode = 18;
pub const KB_SCANCODE_P: ArgusKeyboardScancode = 19;
pub const KB_SCANCODE_Q: ArgusKeyboardScancode = 20;
pub const KB_SCANCODE_R: ArgusKeyboardScancode = 21;
pub const KB_SCANCODE_S: ArgusKeyboardScancode = 22;
pub const KB_SCANCODE_T: ArgusKeyboardScancode = 23;
pub const KB_SCANCODE_U: ArgusKeyboardScancode = 24;
pub const KB_SCANCODE_V: ArgusKeyboardScancode = 25;
pub const KB_SCANCODE_W: ArgusKeyboardScancode = 26;
pub const KB_SCANCODE_X: ArgusKeyboardScancode = 27;
pub const KB_SCANCODE_Y: ArgusKeyboardScancode = 28;
pub const KB_SCANCODE_Z: ArgusKeyboardScancode = 29;
pub const KB_SCANCODE_NUMBER_1: ArgusKeyboardScancode = 30;
pub const KB_SCANCODE_NUMBER_2: ArgusKeyboardScancode = 31;
pub const KB_SCANCODE_NUMBER_3: ArgusKeyboardScancode = 32;
pub const KB_SCANCODE_NUMBER_4: ArgusKeyboardScancode = 33;
pub const KB_SCANCODE_NUMBER_5: ArgusKeyboardScancode = 34;
pub const KB_SCANCODE_NUMBER_6: ArgusKeyboardScancode = 35;
pub const KB_SCANCODE_NUMBER_7: ArgusKeyboardScancode = 36;
pub const KB_SCANCODE_NUMBER_8: ArgusKeyboardScancode = 37;
pub const KB_SCANCODE_NUMBER_9: ArgusKeyboardScancode = 38;
pub const KB_SCANCODE_NUMBER_0: ArgusKeyboardScancode = 39;
pub const KB_SCANCODE_ENTER: ArgusKeyboardScancode = 40;
pub const KB_SCANCODE_ESCAPE: ArgusKeyboardScancode = 41;
pub const KB_SCANCODE_BACKSPACE: ArgusKeyboardScancode = 42;
pub const KB_SCANCODE_TAB: ArgusKeyboardScancode = 43;
pub const KB_SCANCODE_SPACE: ArgusKeyboardScancode = 44;
pub const KB_SCANCODE_MINUS: ArgusKeyboardScancode = 45;
pub const KB_SCANCODE_EQUALS: ArgusKeyboardScancode = 46;
pub const KB_SCANCODE_LEFT_BRACKET: ArgusKeyboardScancode = 47;
pub const KB_SCANCODE_RIGHT_BRACKET: ArgusKeyboardScancode = 48;
pub const KB_SCANCODE_BACK_SLASH: ArgusKeyboardScancode = 49;
pub const KB_SCANCODE_SEMICOLON: ArgusKeyboardScancode = 51;
pub const KB_SCANCODE_APOSTROPHE: ArgusKeyboardScancode = 52;
pub const KB_SCANCODE_GRAVE: ArgusKeyboardScancode = 53;
pub const KB_SCANCODE_COMMA: ArgusKeyboardScancode = 54;
pub const KB_SCANCODE_PERIOD: ArgusKeyboardScancode = 55;
pub const KB_SCANCODE_FORWARD_SLASH: ArgusKeyboardScancode = 56;
pub const KB_SCANCODE_CAPS_LOCK: ArgusKeyboardScancode = 57;
pub const KB_SCANCODE_F1: ArgusKeyboardScancode = 58;
pub const KB_SCANCODE_F2: ArgusKeyboardScancode = 59;
pub const KB_SCANCODE_F3: ArgusKeyboardScancode = 60;
pub const KB_SCANCODE_F4: ArgusKeyboardScancode = 61;
pub const KB_SCANCODE_F6: ArgusKeyboardScancode = 63;
pub const KB_SCANCODE_F7: ArgusKeyboardScancode = 64;
pub const KB_SCANCODE_F8: ArgusKeyboardScancode = 65;
pub const KB_SCANCODE_F5: ArgusKeyboardScancode = 62;
pub const KB_SCANCODE_F9: ArgusKeyboardScancode = 66;
pub const KB_SCANCODE_F10: ArgusKeyboardScancode = 67;
pub const KB_SCANCODE_F11: ArgusKeyboardScancode = 68;
pub const KB_SCANCODE_F12: ArgusKeyboardScancode = 69;
pub const KB_SCANCODE_PRINT_SCREEN: ArgusKeyboardScancode = 70;
pub const KB_SCANCODE_SCROLL_LOCK: ArgusKeyboardScancode = 71;
pub const KB_SCANCODE_PAUSE: ArgusKeyboardScancode = 72;
pub const KB_SCANCODE_INSERT: ArgusKeyboardScancode = 73;
pub const KB_SCANCODE_HOME: ArgusKeyboardScancode = 74;
pub const KB_SCANCODE_PAGE_UP: ArgusKeyboardScancode = 75;
pub const KB_SCANCODE_DELETE: ArgusKeyboardScancode = 76;
pub const KB_SCANCODE_END: ArgusKeyboardScancode = 77;
pub const KB_SCANCODE_PAGE_DOWN: ArgusKeyboardScancode = 78;
pub const KB_SCANCODE_ARROW_RIGHT: ArgusKeyboardScancode = 79;
pub const KB_SCANCODE_ARROW_LEFT: ArgusKeyboardScancode = 80;
pub const KB_SCANCODE_ARROW_DOWN: ArgusKeyboardScancode = 81;
pub const KB_SCANCODE_ARROW_UP: ArgusKeyboardScancode = 82;
pub const KB_SCANCODE_NUMPAD_NUM_LOCK: ArgusKeyboardScancode = 83;
pub const KB_SCANCODE_NUMPAD_DIVIDE: ArgusKeyboardScancode = 84;
pub const KB_SCANCODE_NUMPAD_TIMES: ArgusKeyboardScancode = 85;
pub const KB_SCANCODE_NUMPAD_MINUS: ArgusKeyboardScancode = 86;
pub const KB_SCANCODE_NUMPAD_PLUS: ArgusKeyboardScancode = 87;
pub const KB_SCANCODE_NUMPAD_ENTER: ArgusKeyboardScancode = 88;
pub const KB_SCANCODE_NUMPAD_1: ArgusKeyboardScancode = 89;
pub const KB_SCANCODE_NUMPAD_2: ArgusKeyboardScancode = 90;
pub const KB_SCANCODE_NUMPAD_3: ArgusKeyboardScancode = 91;
pub const KB_SCANCODE_NUMPAD_4: ArgusKeyboardScancode = 92;
pub const KB_SCANCODE_NUMPAD_5: ArgusKeyboardScancode = 93;
pub const KB_SCANCODE_NUMPAD_6: ArgusKeyboardScancode = 94;
pub const KB_SCANCODE_NUMPAD_7: ArgusKeyboardScancode = 95;
pub const KB_SCANCODE_NUMPAD_8: ArgusKeyboardScancode = 96;
pub const KB_SCANCODE_NUMPAD_9: ArgusKeyboardScancode = 97;
pub const KB_SCANCODE_NUMPAD_0: ArgusKeyboardScancode = 98;
pub const KB_SCANCODE_NUMPAD_DOT: ArgusKeyboardScancode = 99;
pub const KB_SCANCODE_NUMPAD_EQUALS: ArgusKeyboardScancode = 103;
pub const KB_SCANCODE_MENU: ArgusKeyboardScancode = 118;
pub const KB_SCANCODE_LEFT_CONTROL: ArgusKeyboardScancode = 224;
pub const KB_SCANCODE_LEFT_SHIFT: ArgusKeyboardScancode = 225;
pub const KB_SCANCODE_LEFT_ALT: ArgusKeyboardScancode = 226;
pub const KB_SCANCODE_SUPER: ArgusKeyboardScancode = 227;
pub const KB_SCANCODE_RIGHT_CONTROL: ArgusKeyboardScancode = 228;
pub const KB_SCANCODE_RIGHT_SHIFT: ArgusKeyboardScancode = 229;
pub const KB_SCANCODE_RIGHT_ALT: ArgusKeyboardScancode = 230;
pub type ArgusKeyboardScancode = ::std::os::raw::c_uint;
pub const KB_COMMAND_ESCAPE: ArgusKeyboardCommand = 0;
pub const KB_COMMAND_F1: ArgusKeyboardCommand = 1;
pub const KB_COMMAND_F2: ArgusKeyboardCommand = 2;
pub const KB_COMMAND_F3: ArgusKeyboardCommand = 3;
pub const KB_COMMAND_F4: ArgusKeyboardCommand = 4;
pub const KB_COMMAND_F5: ArgusKeyboardCommand = 5;
pub const KB_COMMAND_F6: ArgusKeyboardCommand = 6;
pub const KB_COMMAND_F7: ArgusKeyboardCommand = 7;
pub const KB_COMMAND_F8: ArgusKeyboardCommand = 8;
pub const KB_COMMAND_F9: ArgusKeyboardCommand = 9;
pub const KB_COMMAND_F10: ArgusKeyboardCommand = 10;
pub const KB_COMMAND_F11: ArgusKeyboardCommand = 11;
pub const KB_COMMAND_F12: ArgusKeyboardCommand = 12;
pub const KB_COMMAND_BACKSPACE: ArgusKeyboardCommand = 13;
pub const KB_COMMAND_TAB: ArgusKeyboardCommand = 14;
pub const KB_COMMAND_CAPS_LOCK: ArgusKeyboardCommand = 15;
pub const KB_COMMAND_ENTER: ArgusKeyboardCommand = 16;
pub const KB_COMMAND_MENU: ArgusKeyboardCommand = 17;
pub const KB_COMMAND_PRINT_SCREEN: ArgusKeyboardCommand = 18;
pub const KB_COMMAND_SCROLL_LOCK: ArgusKeyboardCommand = 19;
pub const KB_COMMAND_BREAK: ArgusKeyboardCommand = 20;
pub const KB_COMMAND_INSERT: ArgusKeyboardCommand = 21;
pub const KB_COMMAND_HOME: ArgusKeyboardCommand = 22;
pub const KB_COMMAND_PAGE_UP: ArgusKeyboardCommand = 23;
pub const KB_COMMAND_DELETE: ArgusKeyboardCommand = 24;
pub const KB_COMMAND_END: ArgusKeyboardCommand = 25;
pub const KB_COMMAND_PAGE_DOWN: ArgusKeyboardCommand = 26;
pub const KB_COMMAND_ARROW_UP: ArgusKeyboardCommand = 27;
pub const KB_COMMAND_ARROW_LEFT: ArgusKeyboardCommand = 28;
pub const KB_COMMAND_ARROW_DOWN: ArgusKeyboardCommand = 29;
pub const KB_COMMAND_ARROW_RIGHT: ArgusKeyboardCommand = 30;
pub const KB_COMMAND_NUMPAD_NUM_LOCK: ArgusKeyboardCommand = 31;
pub const KB_COMMAND_NUMPAD_ENTER: ArgusKeyboardCommand = 32;
pub const KB_COMMAND_NUMPAD_DOT: ArgusKeyboardCommand = 33;
pub const KB_COMMAND_SUPER: ArgusKeyboardCommand = 34;
#[doc = " @brief Represents a command sent by a key press.\n\n Command keys are defined as those which are not representative of a\n textual character nor a key modifier."]
pub type ArgusKeyboardCommand = ::std::os::raw::c_uint;
pub const KB_MODIFIER_NONE: ArgusKeyboardModifiers = 0;
pub const KB_MODIFIER_SHIFT: ArgusKeyboardModifiers = 1;
pub const KB_MODIFIER_CONTROL: ArgusKeyboardModifiers = 2;
pub const KB_MODIFIER_SUPER: ArgusKeyboardModifiers = 4;
pub const KB_MODIFIER_ALT: ArgusKeyboardModifiers = 8;
pub type ArgusKeyboardModifiers = ::std::os::raw::c_uint;
pub type ArgusHidDeviceId = ::std::os::raw::c_int;
pub const GAMEPAD_BUTTON_UNKNOWN: ArgusGamepadButton = -1;
pub const GAMEPAD_BUTTON_A: ArgusGamepadButton = 0;
pub const GAMEPAD_BUTTON_B: ArgusGamepadButton = 1;
pub const GAMEPAD_BUTTON_X: ArgusGamepadButton = 2;
pub const GAMEPAD_BUTTON_Y: ArgusGamepadButton = 3;
pub const GAMEPAD_BUTTON_DPAD_UP: ArgusGamepadButton = 4;
pub const GAMEPAD_BUTTON_DPAD_DOWN: ArgusGamepadButton = 5;
pub const GAMEPAD_BUTTON_DPAD_LEFT: ArgusGamepadButton = 6;
pub const GAMEPAD_BUTTON_DPAD_RIGHT: ArgusGamepadButton = 7;
pub const GAMEPAD_BUTTON_L_BUMPER: ArgusGamepadButton = 8;
pub const GAMEPAD_BUTTON_R_BUMPER: ArgusGamepadButton = 9;
pub const GAMEPAD_BUTTON_L_TRIGGER: ArgusGamepadButton = 10;
pub const GAMEPAD_BUTTON_R_TRIGGER: ArgusGamepadButton = 11;
pub const GAMEPAD_BUTTON_L_STICK: ArgusGamepadButton = 12;
pub const GAMEPAD_BUTTON_R_STICK: ArgusGamepadButton = 13;
pub const GAMEPAD_BUTTON_L4: ArgusGamepadButton = 14;
pub const GAMEPAD_BUTTON_R4: ArgusGamepadButton = 15;
pub const GAMEPAD_BUTTON_L5: ArgusGamepadButton = 16;
pub const GAMEPAD_BUTTON_R5: ArgusGamepadButton = 17;
pub const GAMEPAD_BUTTON_START: ArgusGamepadButton = 18;
pub const GAMEPAD_BUTTON_BACK: ArgusGamepadButton = 19;
pub const GAMEPAD_BUTTON_GUIDE: ArgusGamepadButton = 20;
pub const GAMEPAD_BUTTON_MISC_1: ArgusGamepadButton = 21;
pub const GAMEPAD_BUTTON_MAX_VALUE: ArgusGamepadButton = 22;
pub type ArgusGamepadButton = ::std::os::raw::c_int;
pub const GAMEPAD_AXIS_UNKNOWN: ArgusGamepadAxis = -1;
pub const GAMEPAD_AXIS_LEFT_X: ArgusGamepadAxis = 0;
pub const GAMEPAD_AXIS_LEFT_Y: ArgusGamepadAxis = 1;
pub const GAMEPAD_AXIS_RIGHT_X: ArgusGamepadAxis = 2;
pub const GAMEPAD_AXIS_RIGHT_Y: ArgusGamepadAxis = 3;
pub const GAMEPAD_AXIS_L_TRIGGER: ArgusGamepadAxis = 4;
pub const GAMEPAD_AXIS_R_TRIGGER: ArgusGamepadAxis = 5;
pub const GAMEPAD_AXIS_MAX_VALUE: ArgusGamepadAxis = 6;
pub type ArgusGamepadAxis = ::std::os::raw::c_int;
pub const MOUSE_BUTTON_PRIMARY: ArgusMouseButton = 1;
pub const MOUSE_BUTTON_SECONDARY: ArgusMouseButton = 2;
pub const MOUSE_BUTTON_MIDDLE: ArgusMouseButton = 3;
pub const MOUSE_BUTTON_BACK: ArgusMouseButton = 4;
pub const MOUSE_BUTTON_FORWARD: ArgusMouseButton = 5;
pub type ArgusMouseButton = ::std::os::raw::c_uint;
pub const MOUSE_AXIS_HORIZONTAL: ArgusMouseAxis = 0;
pub const MOUSE_AXIS_VERTICAL: ArgusMouseAxis = 1;
pub type ArgusMouseAxis = ::std::os::raw::c_uint;
pub type argus_controller_t = *mut ::std::os::raw::c_void;
pub type argus_controller_const_t = *const ::std::os::raw::c_void;
pub const DEADZONE_SHAPE_ELLIPSE: ArgusDeadzoneShape = 0;
pub const DEADZONE_SHAPE_QUAD: ArgusDeadzoneShape = 1;
pub const DEADZONE_SHAPE_CROSS: ArgusDeadzoneShape = 2;
pub const DEADZONE_SHAPE_MAXVALUE: ArgusDeadzoneShape = 3;
pub type ArgusDeadzoneShape = ::std::os::raw::c_uint;
pub const k_event_type_input: &[u8; 6] = b"input\0";
pub const k_event_type_input_device: &[u8; 13] = b"input_device\0";
pub type argus_input_event_t = *mut ::std::os::raw::c_void;
pub type argus_input_event_const_t = *const ::std::os::raw::c_void;
pub type argus_input_device_event_t = *mut ::std::os::raw::c_void;
pub type argus_input_device_event_const_t = *const ::std::os::raw::c_void;
pub const INPUT_EVENT_TYPE_BUTTON_DOWN: ArgusInputEventType = 0;
pub const INPUT_EVENT_TYPE_BUTTON_UP: ArgusInputEventType = 1;
pub const INPUT_EVENT_TYPE_AXIS_CHANGED: ArgusInputEventType = 2;
pub type ArgusInputEventType = ::std::os::raw::c_uint;
pub const INPUT_DEV_EVENT_TYPE_GAMEPAD_CONNECTED: ArgusInputDeviceEventType = 0;
pub const INPUT_DEV_EVENT_TYPE_GAMEPAD_DISCONNECTED: ArgusInputDeviceEventType = 1;
pub type ArgusInputDeviceEventType = ::std::os::raw::c_uint;
pub type argus_input_manager_t = *mut ::std::os::raw::c_void;
pub type argus_input_manager_const_t = *const ::std::os::raw::c_void;
pub type argus_text_input_context_t = *mut ::std::os::raw::c_void;
pub type argus_text_input_context_const_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn argus_get_key_name(scancode: ArgusKeyboardScancode) -> *const ::std::os::raw::c_char;
    pub fn argus_is_key_pressed(scancode: ArgusKeyboardScancode) -> bool;
    pub fn argus_get_connected_gamepad_count() -> u8;
    pub fn argus_get_unattached_gamepad_count() -> u8;
    pub fn argus_get_gamepad_name(gamepad: ArgusHidDeviceId) -> *const ::std::os::raw::c_char;
    pub fn argus_is_gamepad_button_pressed(
        gamepad: ArgusHidDeviceId,
        button: ArgusGamepadButton,
    ) -> bool;
    pub fn argus_get_gamepad_axis(gamepad: ArgusHidDeviceId, axis: ArgusGamepadAxis) -> f64;
    pub fn argus_get_gamepad_axis_delta(gamepad: ArgusHidDeviceId, axis: ArgusGamepadAxis) -> f64;
    pub fn argus_mouse_delta() -> argus_vector_2d_t;
    pub fn argus_mouse_pos() -> argus_vector_2d_t;
    pub fn argus_get_mouse_axis(axis: ArgusMouseAxis) -> f64;
    pub fn argus_get_mouse_axis_delta(axis: ArgusMouseAxis) -> f64;
    pub fn argus_is_mouse_button_pressed(button: ArgusMouseButton) -> bool;
    pub fn argus_controller_get_name(
        controller: argus_controller_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_controller_has_gamepad(controller: argus_controller_const_t) -> bool;
    pub fn argus_controller_attach_gamepad(controller: argus_controller_t, id: ArgusHidDeviceId);
    pub fn argus_controller_attach_first_available_gamepad(controller: argus_controller_t) -> bool;
    pub fn argus_controller_detach_gamepad(controller: argus_controller_t);
    pub fn argus_controller_get_gamepad_name(
        controller: argus_controller_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_controller_get_deadzone_radius(controller: argus_controller_const_t) -> f64;
    pub fn argus_controller_set_deadzone_radius(controller: argus_controller_t, radius: f64);
    pub fn argus_controller_clear_deadzone_radius(controller: argus_controller_t);
    pub fn argus_controller_get_deadzone_shape(
        controller: argus_controller_const_t,
    ) -> ArgusDeadzoneShape;
    pub fn argus_controller_set_deadzone_shape(
        controller: argus_controller_t,
        shape: ArgusDeadzoneShape,
    );
    pub fn argus_controller_clear_deadzone_shape(controller: argus_controller_t);
    pub fn argus_controller_get_axis_deadzone_radius(
        controller: argus_controller_const_t,
        axis: ArgusGamepadAxis,
    ) -> f64;
    pub fn argus_controller_set_axis_deadzone_radius(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
        radius: f64,
    );
    pub fn argus_controller_clear_axis_deadzone_radius(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
    );
    pub fn argus_controller_get_axis_deadzone_shape(
        controller: argus_controller_const_t,
        axis: ArgusGamepadAxis,
    ) -> ArgusDeadzoneShape;
    pub fn argus_controller_set_axis_deadzone_shape(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
        shape: ArgusDeadzoneShape,
    );
    pub fn argus_controller_clear_axis_deadzone_shape(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
    );
    pub fn argus_controller_unbind_action(
        controller: argus_controller_t,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_get_keyboard_key_bindings_count(
        controller: argus_controller_const_t,
        key: ArgusKeyboardScancode,
    ) -> usize;
    pub fn argus_controller_get_keyboard_key_bindings(
        controller: argus_controller_const_t,
        key: ArgusKeyboardScancode,
        out_bindings: *mut *const ::std::os::raw::c_char,
        count: usize,
    );
    pub fn argus_controller_get_keyboard_action_bindings_count(
        controller: argus_controller_const_t,
        action: *const ::std::os::raw::c_char,
    ) -> usize;
    pub fn argus_controller_get_keyboard_action_bindings(
        controller: argus_controller_const_t,
        action: *const ::std::os::raw::c_char,
        out_scancodes: *mut ArgusKeyboardScancode,
        count: usize,
    );
    pub fn argus_controller_bind_keyboard_key(
        controller: argus_controller_t,
        key: ArgusKeyboardScancode,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_unbind_keyboard_key(
        controller: argus_controller_t,
        key: ArgusKeyboardScancode,
    );
    pub fn argus_controller_unbind_keyboard_key_action(
        controller: argus_controller_t,
        key: ArgusKeyboardScancode,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_bind_mouse_button(
        controller: argus_controller_t,
        button: ArgusMouseButton,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_unbind_mouse_button(
        controller: argus_controller_t,
        button: ArgusMouseButton,
    );
    pub fn argus_controller_unbind_mouse_button_action(
        controller: argus_controller_t,
        button: ArgusMouseButton,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_bind_mouse_axis(
        controller: argus_controller_t,
        axis: ArgusMouseAxis,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_unbind_mouse_axis(controller: argus_controller_t, axis: ArgusMouseAxis);
    pub fn argus_controller_unbind_mouse_axis_action(
        controller: argus_controller_t,
        axis: ArgusMouseAxis,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_bind_gamepad_button(
        controller: argus_controller_t,
        button: ArgusGamepadButton,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_unbind_gamepad_button(
        controller: argus_controller_t,
        button: ArgusGamepadButton,
    );
    pub fn argus_controller_unbind_gamepad_button_action(
        controller: argus_controller_t,
        button: ArgusGamepadButton,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_bind_gamepad_axis(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_unbind_gamepad_axis(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
    );
    pub fn argus_controller_unbind_gamepad_axis_action(
        controller: argus_controller_t,
        axis: ArgusGamepadAxis,
        action: *const ::std::os::raw::c_char,
    );
    pub fn argus_controller_is_gamepad_button_pressed(
        controller: argus_controller_const_t,
        button: ArgusGamepadButton,
    ) -> bool;
    pub fn argus_controller_get_gamepad_axis(
        controller: argus_controller_const_t,
        axis: ArgusGamepadAxis,
    ) -> f64;
    pub fn argus_controller_get_gamepad_axis_delta(
        controller: argus_controller_const_t,
        axis: ArgusGamepadAxis,
    ) -> f64;
    pub fn argus_controller_is_action_pressed(
        controller: argus_controller_const_t,
        action: *const ::std::os::raw::c_char,
    ) -> bool;
    pub fn argus_controller_get_action_axis(
        controller: argus_controller_const_t,
        action: *const ::std::os::raw::c_char,
    ) -> f64;
    pub fn argus_controller_get_action_axis_delta(
        controller: argus_controller_const_t,
        action: *const ::std::os::raw::c_char,
    ) -> f64;
    pub fn argus_input_event_get_input_type(
        event: argus_input_event_const_t,
    ) -> ArgusInputEventType;
    pub fn argus_input_event_get_window(event: argus_input_event_const_t) -> argus_window_const_t;
    pub fn argus_input_event_get_controller_name(
        event: argus_input_event_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_input_event_get_action(
        event: argus_input_event_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_input_event_get_axis_value(event: argus_input_event_const_t) -> f64;
    pub fn argus_input_event_get_axis_delta(event: argus_input_event_const_t) -> f64;
    pub fn argus_input_device_event_get_device_event(
        event: argus_input_device_event_const_t,
    ) -> ArgusInputDeviceEventType;
    pub fn argus_input_device_event_get_controller_name(
        event: argus_input_device_event_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_input_device_event_get_device_id(
        event: argus_input_device_event_const_t,
    ) -> ArgusHidDeviceId;
    pub fn argus_input_manager_get_instance() -> argus_input_manager_t;
    pub fn argus_input_manager_get_controller(
        manager: argus_input_manager_t,
        name: *const ::std::os::raw::c_char,
    ) -> argus_controller_t;
    pub fn argus_input_manager_add_controller(
        manager: argus_input_manager_t,
        name: *const ::std::os::raw::c_char,
    ) -> argus_controller_t;
    pub fn argus_input_manager_remove_controller(
        manager: argus_input_manager_t,
        name: *const ::std::os::raw::c_char,
    );
    pub fn argus_input_manager_get_global_deadzone_radius(
        manager: argus_input_manager_const_t,
    ) -> f64;
    pub fn argus_input_manager_set_global_deadzone_radius(
        manager: argus_input_manager_t,
        radius: f64,
    );
    pub fn argus_input_manager_get_global_deadzone_shape(
        manager: argus_input_manager_const_t,
    ) -> ArgusDeadzoneShape;
    pub fn argus_input_manager_set_global_deadzone_shape(
        manager: argus_input_manager_t,
        shape: ArgusDeadzoneShape,
    );
    pub fn argus_input_manager_get_global_axis_deadzone_radius(
        manager: argus_input_manager_const_t,
        axis: ArgusGamepadAxis,
    ) -> f64;
    pub fn argus_input_manager_set_global_axis_deadzone_radius(
        manager: argus_input_manager_t,
        axis: ArgusGamepadAxis,
        radius: f64,
    );
    pub fn argus_input_manager_clear_global_axis_deadzone_radius(
        manager: argus_input_manager_t,
        axis: ArgusGamepadAxis,
    );
    pub fn argus_input_manager_get_global_axis_deadzone_shape(
        manager: argus_input_manager_const_t,
        axis: ArgusGamepadAxis,
    ) -> ArgusDeadzoneShape;
    pub fn argus_input_manager_set_global_axis_deadzone_shape(
        manager: argus_input_manager_t,
        axis: ArgusGamepadAxis,
        shape: ArgusDeadzoneShape,
    );
    pub fn argus_input_manager_clear_global_axis_deadzone_shape(
        manager: argus_input_manager_t,
        axis: ArgusGamepadAxis,
    );
    pub fn argus_text_input_context_create() -> argus_text_input_context_t;
    pub fn argus_text_input_context_get_current_text(
        context: argus_text_input_context_const_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn argus_text_input_context_activate(context: argus_text_input_context_t);
    pub fn argus_text_input_context_deactivate(context: argus_text_input_context_t);
    pub fn argus_text_input_context_release(context: argus_text_input_context_t);
}
